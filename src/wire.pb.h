// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace wire {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wire_2eproto();
void protobuf_AssignDesc_wire_2eproto();
void protobuf_ShutdownFile_wire_2eproto();

class Message;
class Action;

// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string destination = 1;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 1;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  inline void set_allocated_destination(::std::string* destination);

  // required string payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // optional int32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wire.Message)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* destination_;
  ::std::string* payload_;
  ::google::protobuf::int32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:wire.Action)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payload_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required string destination = 1;
inline bool Message::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Message::destination() const {
  return *destination_;
}
inline void Message::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Message::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Message::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Message::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_destination(::std::string* destination) {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_;
  }
  if (destination) {
    set_has_destination();
    destination_ = destination;
  } else {
    clear_has_destination();
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string payload = 2;
inline bool Message::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Message::payload() const {
  return *payload_;
}
inline void Message::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Message::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flags = 3;
inline bool Message::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 Message::flags() const {
  return flags_;
}
inline void Message::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
}

// -------------------------------------------------------------------

// Action

// required int32 type = 1;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Action::type() const {
  return type_;
}
inline void Action::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string payload = 2;
inline bool Action::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Action::payload() const {
  return *payload_;
}
inline void Action::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Action::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Action::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Action::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Action::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wire

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
