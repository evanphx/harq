// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace wire {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wire_2eproto();
void protobuf_AssignDesc_wire_2eproto();
void protobuf_ShutdownFile_wire_2eproto();

class Message;
class Action;
class BondRequest;
class ConnectionConfigure;
class MessageRange;
class Queue;
class Stat;
class ReplicaAction;
class QueueError;
class QueueDeclaration;
class QueueConfiguration;

enum ReplicaAction_Type {
  ReplicaAction_Type_eStart = 0,
  ReplicaAction_Type_eReserve = 1
};
bool ReplicaAction_Type_IsValid(int value);
const ReplicaAction_Type ReplicaAction_Type_Type_MIN = ReplicaAction_Type_eStart;
const ReplicaAction_Type ReplicaAction_Type_Type_MAX = ReplicaAction_Type_eReserve;
const int ReplicaAction_Type_Type_ARRAYSIZE = ReplicaAction_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReplicaAction_Type_descriptor();
inline const ::std::string& ReplicaAction_Type_Name(ReplicaAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReplicaAction_Type_descriptor(), value);
}
inline bool ReplicaAction_Type_Parse(
    const ::std::string& name, ReplicaAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReplicaAction_Type>(
    ReplicaAction_Type_descriptor(), name, value);
}
enum QueueDeclaration_Type {
  QueueDeclaration_Type_eBroadcast = 0,
  QueueDeclaration_Type_eTransient = 1,
  QueueDeclaration_Type_eDurable = 2
};
bool QueueDeclaration_Type_IsValid(int value);
const QueueDeclaration_Type QueueDeclaration_Type_Type_MIN = QueueDeclaration_Type_eBroadcast;
const QueueDeclaration_Type QueueDeclaration_Type_Type_MAX = QueueDeclaration_Type_eDurable;
const int QueueDeclaration_Type_Type_ARRAYSIZE = QueueDeclaration_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueueDeclaration_Type_descriptor();
inline const ::std::string& QueueDeclaration_Type_Name(QueueDeclaration_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueueDeclaration_Type_descriptor(), value);
}
inline bool QueueDeclaration_Type_Parse(
    const ::std::string& name, QueueDeclaration_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueueDeclaration_Type>(
    QueueDeclaration_Type_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string destination = 1;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 1;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  inline void set_allocated_destination(::std::string* destination);

  // required bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 flags = 4;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 4;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional uint64 confirm_id = 5;
  inline bool has_confirm_id() const;
  inline void clear_confirm_id();
  static const int kConfirmIdFieldNumber = 5;
  inline ::google::protobuf::uint64 confirm_id() const;
  inline void set_confirm_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:wire.Message)
 private:
  inline void set_has_destination();
  inline void clear_has_destination();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_confirm_id();
  inline void clear_has_confirm_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* destination_;
  ::std::string* payload_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 confirm_id_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:wire.Action)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payload_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class BondRequest : public ::google::protobuf::Message {
 public:
  BondRequest();
  virtual ~BondRequest();

  BondRequest(const BondRequest& from);

  inline BondRequest& operator=(const BondRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BondRequest& default_instance();

  void Swap(BondRequest* other);

  // implements Message ----------------------------------------------

  BondRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BondRequest& from);
  void MergeFrom(const BondRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  inline ::std::string* release_queue();
  inline void set_allocated_queue(::std::string* queue);

  // required string destination = 2;
  inline bool has_destination() const;
  inline void clear_destination();
  static const int kDestinationFieldNumber = 2;
  inline const ::std::string& destination() const;
  inline void set_destination(const ::std::string& value);
  inline void set_destination(const char* value);
  inline void set_destination(const char* value, size_t size);
  inline ::std::string* mutable_destination();
  inline ::std::string* release_destination();
  inline void set_allocated_destination(::std::string* destination);

  // @@protoc_insertion_point(class_scope:wire.BondRequest)
 private:
  inline void set_has_queue();
  inline void clear_has_queue();
  inline void set_has_destination();
  inline void clear_has_destination();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* queue_;
  ::std::string* destination_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static BondRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConnectionConfigure : public ::google::protobuf::Message {
 public:
  ConnectionConfigure();
  virtual ~ConnectionConfigure();

  ConnectionConfigure(const ConnectionConfigure& from);

  inline ConnectionConfigure& operator=(const ConnectionConfigure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionConfigure& default_instance();

  void Swap(ConnectionConfigure* other);

  // implements Message ----------------------------------------------

  ConnectionConfigure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionConfigure& from);
  void MergeFrom(const ConnectionConfigure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool tap = 1;
  inline bool has_tap() const;
  inline void clear_tap();
  static const int kTapFieldNumber = 1;
  inline bool tap() const;
  inline void set_tap(bool value);

  // optional bool ack = 2;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 2;
  inline bool ack() const;
  inline void set_ack(bool value);

  // optional bool confirm = 3;
  inline bool has_confirm() const;
  inline void clear_confirm();
  static const int kConfirmFieldNumber = 3;
  inline bool confirm() const;
  inline void set_confirm(bool value);

  // optional uint32 inflight = 4;
  inline bool has_inflight() const;
  inline void clear_inflight();
  static const int kInflightFieldNumber = 4;
  inline ::google::protobuf::uint32 inflight() const;
  inline void set_inflight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wire.ConnectionConfigure)
 private:
  inline void set_has_tap();
  inline void clear_has_tap();
  inline void set_has_ack();
  inline void clear_has_ack();
  inline void set_has_confirm();
  inline void clear_has_confirm();
  inline void set_has_inflight();
  inline void clear_has_inflight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool tap_;
  bool ack_;
  bool confirm_;
  ::google::protobuf::uint32 inflight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static ConnectionConfigure* default_instance_;
};
// -------------------------------------------------------------------

class MessageRange : public ::google::protobuf::Message {
 public:
  MessageRange();
  virtual ~MessageRange();

  MessageRange(const MessageRange& from);

  inline MessageRange& operator=(const MessageRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRange& default_instance();

  void Swap(MessageRange* other);

  // implements Message ----------------------------------------------

  MessageRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRange& from);
  void MergeFrom(const MessageRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wire.MessageRange)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static MessageRange* default_instance_;
};
// -------------------------------------------------------------------

class Queue : public ::google::protobuf::Message {
 public:
  Queue();
  virtual ~Queue();

  Queue(const Queue& from);

  inline Queue& operator=(const Queue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Queue& default_instance();

  void Swap(Queue* other);

  // implements Message ----------------------------------------------

  Queue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Queue& from);
  void MergeFrom(const Queue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // repeated .wire.MessageRange ranges = 2;
  inline int ranges_size() const;
  inline void clear_ranges();
  static const int kRangesFieldNumber = 2;
  inline const ::wire::MessageRange& ranges(int index) const;
  inline ::wire::MessageRange* mutable_ranges(int index);
  inline ::wire::MessageRange* add_ranges();
  inline const ::google::protobuf::RepeatedPtrField< ::wire::MessageRange >&
      ranges() const;
  inline ::google::protobuf::RepeatedPtrField< ::wire::MessageRange >*
      mutable_ranges();

  // @@protoc_insertion_point(class_scope:wire.Queue)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::wire::MessageRange > ranges_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Queue* default_instance_;
};
// -------------------------------------------------------------------

class Stat : public ::google::protobuf::Message {
 public:
  Stat();
  virtual ~Stat();

  Stat(const Stat& from);

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stat& default_instance();

  void Swap(Stat* other);

  // implements Message ----------------------------------------------

  Stat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stat& from);
  void MergeFrom(const Stat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bool exists = 2;
  inline bool has_exists() const;
  inline void clear_exists();
  static const int kExistsFieldNumber = 2;
  inline bool exists() const;
  inline void set_exists(bool value);

  // optional uint32 transient_size = 3;
  inline bool has_transient_size() const;
  inline void clear_transient_size();
  static const int kTransientSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 transient_size() const;
  inline void set_transient_size(::google::protobuf::uint32 value);

  // optional uint32 durable_size = 4;
  inline bool has_durable_size() const;
  inline void clear_durable_size();
  static const int kDurableSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 durable_size() const;
  inline void set_durable_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:wire.Stat)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_exists();
  inline void clear_has_exists();
  inline void set_has_transient_size();
  inline void clear_has_transient_size();
  inline void set_has_durable_size();
  inline void clear_has_durable_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  bool exists_;
  ::google::protobuf::uint32 transient_size_;
  ::google::protobuf::uint32 durable_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Stat* default_instance_;
};
// -------------------------------------------------------------------

class ReplicaAction : public ::google::protobuf::Message {
 public:
  ReplicaAction();
  virtual ~ReplicaAction();

  ReplicaAction(const ReplicaAction& from);

  inline ReplicaAction& operator=(const ReplicaAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicaAction& default_instance();

  void Swap(ReplicaAction* other);

  // implements Message ----------------------------------------------

  ReplicaAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicaAction& from);
  void MergeFrom(const ReplicaAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReplicaAction_Type Type;
  static const Type eStart = ReplicaAction_Type_eStart;
  static const Type eReserve = ReplicaAction_Type_eReserve;
  static inline bool Type_IsValid(int value) {
    return ReplicaAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ReplicaAction_Type_Type_MIN;
  static const Type Type_MAX =
    ReplicaAction_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ReplicaAction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ReplicaAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ReplicaAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ReplicaAction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .wire.ReplicaAction.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::wire::ReplicaAction_Type type() const;
  inline void set_type(::wire::ReplicaAction_Type value);

  // optional bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:wire.ReplicaAction)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payload_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static ReplicaAction* default_instance_;
};
// -------------------------------------------------------------------

class QueueError : public ::google::protobuf::Message {
 public:
  QueueError();
  virtual ~QueueError();

  QueueError(const QueueError& from);

  inline QueueError& operator=(const QueueError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueError& default_instance();

  void Swap(QueueError* other);

  // implements Message ----------------------------------------------

  QueueError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueError& from);
  void MergeFrom(const QueueError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline const ::std::string& queue() const;
  inline void set_queue(const ::std::string& value);
  inline void set_queue(const char* value);
  inline void set_queue(const char* value, size_t size);
  inline ::std::string* mutable_queue();
  inline ::std::string* release_queue();
  inline void set_allocated_queue(::std::string* queue);

  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:wire.QueueError)
 private:
  inline void set_has_queue();
  inline void clear_has_queue();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* queue_;
  ::std::string* error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static QueueError* default_instance_;
};
// -------------------------------------------------------------------

class QueueDeclaration : public ::google::protobuf::Message {
 public:
  QueueDeclaration();
  virtual ~QueueDeclaration();

  QueueDeclaration(const QueueDeclaration& from);

  inline QueueDeclaration& operator=(const QueueDeclaration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueDeclaration& default_instance();

  void Swap(QueueDeclaration* other);

  // implements Message ----------------------------------------------

  QueueDeclaration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueDeclaration& from);
  void MergeFrom(const QueueDeclaration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueueDeclaration_Type Type;
  static const Type eBroadcast = QueueDeclaration_Type_eBroadcast;
  static const Type eTransient = QueueDeclaration_Type_eTransient;
  static const Type eDurable = QueueDeclaration_Type_eDurable;
  static inline bool Type_IsValid(int value) {
    return QueueDeclaration_Type_IsValid(value);
  }
  static const Type Type_MIN =
    QueueDeclaration_Type_Type_MIN;
  static const Type Type_MAX =
    QueueDeclaration_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    QueueDeclaration_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return QueueDeclaration_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return QueueDeclaration_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return QueueDeclaration_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .wire.QueueDeclaration.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::wire::QueueDeclaration_Type type() const;
  inline void set_type(::wire::QueueDeclaration_Type value);

  // @@protoc_insertion_point(class_scope:wire.QueueDeclaration)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static QueueDeclaration* default_instance_;
};
// -------------------------------------------------------------------

class QueueConfiguration : public ::google::protobuf::Message {
 public:
  QueueConfiguration();
  virtual ~QueueConfiguration();

  QueueConfiguration(const QueueConfiguration& from);

  inline QueueConfiguration& operator=(const QueueConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueueConfiguration& default_instance();

  void Swap(QueueConfiguration* other);

  // implements Message ----------------------------------------------

  QueueConfiguration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueueConfiguration& from);
  void MergeFrom(const QueueConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .wire.QueueDeclaration queues = 1;
  inline int queues_size() const;
  inline void clear_queues();
  static const int kQueuesFieldNumber = 1;
  inline const ::wire::QueueDeclaration& queues(int index) const;
  inline ::wire::QueueDeclaration* mutable_queues(int index);
  inline ::wire::QueueDeclaration* add_queues();
  inline const ::google::protobuf::RepeatedPtrField< ::wire::QueueDeclaration >&
      queues() const;
  inline ::google::protobuf::RepeatedPtrField< ::wire::QueueDeclaration >*
      mutable_queues();

  // @@protoc_insertion_point(class_scope:wire.QueueConfiguration)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::wire::QueueDeclaration > queues_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static QueueConfiguration* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required string destination = 1;
inline bool Message::has_destination() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_destination() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_destination() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& Message::destination() const {
  return *destination_;
}
inline void Message::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Message::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void Message::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* Message::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_destination(::std::string* destination) {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_;
  }
  if (destination) {
    set_has_destination();
    destination_ = destination;
  } else {
    clear_has_destination();
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes payload = 2;
inline bool Message::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Message::payload() const {
  return *payload_;
}
inline void Message::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Message::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 id = 3;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Message::id() const {
  return id_;
}
inline void Message::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 flags = 4;
inline bool Message::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 Message::flags() const {
  return flags_;
}
inline void Message::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint64 confirm_id = 5;
inline bool Message::has_confirm_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message::set_has_confirm_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message::clear_has_confirm_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message::clear_confirm_id() {
  confirm_id_ = GOOGLE_ULONGLONG(0);
  clear_has_confirm_id();
}
inline ::google::protobuf::uint64 Message::confirm_id() const {
  return confirm_id_;
}
inline void Message::set_confirm_id(::google::protobuf::uint64 value) {
  set_has_confirm_id();
  confirm_id_ = value;
}

// -------------------------------------------------------------------

// Action

// required int32 type = 1;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Action::type() const {
  return type_;
}
inline void Action::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string payload = 2;
inline bool Action::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& Action::payload() const {
  return *payload_;
}
inline void Action::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Action::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Action::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* Action::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Action::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 id = 3;
inline bool Action::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Action::id() const {
  return id_;
}
inline void Action::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// BondRequest

// required string queue = 1;
inline bool BondRequest::has_queue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BondRequest::set_has_queue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BondRequest::clear_has_queue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BondRequest::clear_queue() {
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    queue_->clear();
  }
  clear_has_queue();
}
inline const ::std::string& BondRequest::queue() const {
  return *queue_;
}
inline void BondRequest::set_queue(const ::std::string& value) {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void BondRequest::set_queue(const char* value) {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void BondRequest::set_queue(const char* value, size_t size) {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BondRequest::mutable_queue() {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  return queue_;
}
inline ::std::string* BondRequest::release_queue() {
  clear_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queue_;
    queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BondRequest::set_allocated_queue(::std::string* queue) {
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    delete queue_;
  }
  if (queue) {
    set_has_queue();
    queue_ = queue;
  } else {
    clear_has_queue();
    queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string destination = 2;
inline bool BondRequest::has_destination() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BondRequest::set_has_destination() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BondRequest::clear_has_destination() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BondRequest::clear_destination() {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    destination_->clear();
  }
  clear_has_destination();
}
inline const ::std::string& BondRequest::destination() const {
  return *destination_;
}
inline void BondRequest::set_destination(const ::std::string& value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void BondRequest::set_destination(const char* value) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(value);
}
inline void BondRequest::set_destination(const char* value, size_t size) {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BondRequest::mutable_destination() {
  set_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    destination_ = new ::std::string;
  }
  return destination_;
}
inline ::std::string* BondRequest::release_destination() {
  clear_has_destination();
  if (destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destination_;
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BondRequest::set_allocated_destination(::std::string* destination) {
  if (destination_ != &::google::protobuf::internal::kEmptyString) {
    delete destination_;
  }
  if (destination) {
    set_has_destination();
    destination_ = destination;
  } else {
    clear_has_destination();
    destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConnectionConfigure

// optional bool tap = 1;
inline bool ConnectionConfigure::has_tap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionConfigure::set_has_tap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionConfigure::clear_has_tap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionConfigure::clear_tap() {
  tap_ = false;
  clear_has_tap();
}
inline bool ConnectionConfigure::tap() const {
  return tap_;
}
inline void ConnectionConfigure::set_tap(bool value) {
  set_has_tap();
  tap_ = value;
}

// optional bool ack = 2;
inline bool ConnectionConfigure::has_ack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionConfigure::set_has_ack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionConfigure::clear_has_ack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionConfigure::clear_ack() {
  ack_ = false;
  clear_has_ack();
}
inline bool ConnectionConfigure::ack() const {
  return ack_;
}
inline void ConnectionConfigure::set_ack(bool value) {
  set_has_ack();
  ack_ = value;
}

// optional bool confirm = 3;
inline bool ConnectionConfigure::has_confirm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionConfigure::set_has_confirm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionConfigure::clear_has_confirm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionConfigure::clear_confirm() {
  confirm_ = false;
  clear_has_confirm();
}
inline bool ConnectionConfigure::confirm() const {
  return confirm_;
}
inline void ConnectionConfigure::set_confirm(bool value) {
  set_has_confirm();
  confirm_ = value;
}

// optional uint32 inflight = 4;
inline bool ConnectionConfigure::has_inflight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionConfigure::set_has_inflight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionConfigure::clear_has_inflight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionConfigure::clear_inflight() {
  inflight_ = 0u;
  clear_has_inflight();
}
inline ::google::protobuf::uint32 ConnectionConfigure::inflight() const {
  return inflight_;
}
inline void ConnectionConfigure::set_inflight(::google::protobuf::uint32 value) {
  set_has_inflight();
  inflight_ = value;
}

// -------------------------------------------------------------------

// MessageRange

// required int32 start = 1;
inline bool MessageRange::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageRange::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageRange::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageRange::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 MessageRange::start() const {
  return start_;
}
inline void MessageRange::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// required int32 count = 2;
inline bool MessageRange::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageRange::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageRange::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageRange::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 MessageRange::count() const {
  return count_;
}
inline void MessageRange::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Queue

// required int32 size = 1;
inline bool Queue::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Queue::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Queue::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Queue::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Queue::size() const {
  return size_;
}
inline void Queue::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// repeated .wire.MessageRange ranges = 2;
inline int Queue::ranges_size() const {
  return ranges_.size();
}
inline void Queue::clear_ranges() {
  ranges_.Clear();
}
inline const ::wire::MessageRange& Queue::ranges(int index) const {
  return ranges_.Get(index);
}
inline ::wire::MessageRange* Queue::mutable_ranges(int index) {
  return ranges_.Mutable(index);
}
inline ::wire::MessageRange* Queue::add_ranges() {
  return ranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wire::MessageRange >&
Queue::ranges() const {
  return ranges_;
}
inline ::google::protobuf::RepeatedPtrField< ::wire::MessageRange >*
Queue::mutable_ranges() {
  return &ranges_;
}

// -------------------------------------------------------------------

// Stat

// required string name = 1;
inline bool Stat::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stat::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stat::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stat::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Stat::name() const {
  return *name_;
}
inline void Stat::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Stat::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Stat::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stat::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Stat::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Stat::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool exists = 2;
inline bool Stat::has_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stat::set_has_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stat::clear_has_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stat::clear_exists() {
  exists_ = false;
  clear_has_exists();
}
inline bool Stat::exists() const {
  return exists_;
}
inline void Stat::set_exists(bool value) {
  set_has_exists();
  exists_ = value;
}

// optional uint32 transient_size = 3;
inline bool Stat::has_transient_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stat::set_has_transient_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stat::clear_has_transient_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stat::clear_transient_size() {
  transient_size_ = 0u;
  clear_has_transient_size();
}
inline ::google::protobuf::uint32 Stat::transient_size() const {
  return transient_size_;
}
inline void Stat::set_transient_size(::google::protobuf::uint32 value) {
  set_has_transient_size();
  transient_size_ = value;
}

// optional uint32 durable_size = 4;
inline bool Stat::has_durable_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stat::set_has_durable_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stat::clear_has_durable_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stat::clear_durable_size() {
  durable_size_ = 0u;
  clear_has_durable_size();
}
inline ::google::protobuf::uint32 Stat::durable_size() const {
  return durable_size_;
}
inline void Stat::set_durable_size(::google::protobuf::uint32 value) {
  set_has_durable_size();
  durable_size_ = value;
}

// -------------------------------------------------------------------

// ReplicaAction

// required .wire.ReplicaAction.Type type = 1;
inline bool ReplicaAction::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaAction::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::wire::ReplicaAction_Type ReplicaAction::type() const {
  return static_cast< ::wire::ReplicaAction_Type >(type_);
}
inline void ReplicaAction::set_type(::wire::ReplicaAction_Type value) {
  assert(::wire::ReplicaAction_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes payload = 2;
inline bool ReplicaAction::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicaAction::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicaAction::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicaAction::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& ReplicaAction::payload() const {
  return *payload_;
}
inline void ReplicaAction::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void ReplicaAction::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void ReplicaAction::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplicaAction::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* ReplicaAction::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReplicaAction::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// QueueError

// required string queue = 1;
inline bool QueueError::has_queue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueueError::set_has_queue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueueError::clear_has_queue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueueError::clear_queue() {
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    queue_->clear();
  }
  clear_has_queue();
}
inline const ::std::string& QueueError::queue() const {
  return *queue_;
}
inline void QueueError::set_queue(const ::std::string& value) {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void QueueError::set_queue(const char* value) {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  queue_->assign(value);
}
inline void QueueError::set_queue(const char* value, size_t size) {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  queue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueueError::mutable_queue() {
  set_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    queue_ = new ::std::string;
  }
  return queue_;
}
inline ::std::string* QueueError::release_queue() {
  clear_has_queue();
  if (queue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queue_;
    queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueueError::set_allocated_queue(::std::string* queue) {
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    delete queue_;
  }
  if (queue) {
    set_has_queue();
    queue_ = queue;
  } else {
    clear_has_queue();
    queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string error = 2;
inline bool QueueError::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueueError::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueueError::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueueError::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& QueueError::error() const {
  return *error_;
}
inline void QueueError::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void QueueError::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void QueueError::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueueError::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* QueueError::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueueError::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// QueueDeclaration

// required string name = 1;
inline bool QueueDeclaration::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueueDeclaration::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueueDeclaration::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueueDeclaration::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueueDeclaration::name() const {
  return *name_;
}
inline void QueueDeclaration::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueueDeclaration::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QueueDeclaration::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueueDeclaration::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* QueueDeclaration::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueueDeclaration::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .wire.QueueDeclaration.Type type = 2;
inline bool QueueDeclaration::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueueDeclaration::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueueDeclaration::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueueDeclaration::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::wire::QueueDeclaration_Type QueueDeclaration::type() const {
  return static_cast< ::wire::QueueDeclaration_Type >(type_);
}
inline void QueueDeclaration::set_type(::wire::QueueDeclaration_Type value) {
  assert(::wire::QueueDeclaration_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// QueueConfiguration

// repeated .wire.QueueDeclaration queues = 1;
inline int QueueConfiguration::queues_size() const {
  return queues_.size();
}
inline void QueueConfiguration::clear_queues() {
  queues_.Clear();
}
inline const ::wire::QueueDeclaration& QueueConfiguration::queues(int index) const {
  return queues_.Get(index);
}
inline ::wire::QueueDeclaration* QueueConfiguration::mutable_queues(int index) {
  return queues_.Mutable(index);
}
inline ::wire::QueueDeclaration* QueueConfiguration::add_queues() {
  return queues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wire::QueueDeclaration >&
QueueConfiguration::queues() const {
  return queues_;
}
inline ::google::protobuf::RepeatedPtrField< ::wire::QueueDeclaration >*
QueueConfiguration::mutable_queues() {
  return &queues_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wire

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wire::ReplicaAction_Type>() {
  return ::wire::ReplicaAction_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wire::QueueDeclaration_Type>() {
  return ::wire::QueueDeclaration_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
